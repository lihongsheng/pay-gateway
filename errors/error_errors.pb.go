// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errors

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 重复请求
func IsDuplicateRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DUPLICATE_REQUEST.String() && e.Code == 400
}

// 重复请求
func ErrorDuplicateRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DUPLICATE_REQUEST.String(), fmt.Sprintf(format, args...))
}

// 为某个枚举单独设置错误码业务错误
func IsUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNAUTHORIZED.String() && e.Code == 401
}

// 为某个枚举单独设置错误码业务错误
func ErrorUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_UNAUTHORIZED.String(), fmt.Sprintf(format, args...))
}

func IsForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FORBIDDEN.String() && e.Code == 403
}

func ErrorForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_FORBIDDEN.String(), fmt.Sprintf(format, args...))
}

func IsNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NOT_FOUND.String() && e.Code == 404
}

func ErrorNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsNotAcceptable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NOT_ACCEPTABLE.String() && e.Code == 404
}

func ErrorNotAcceptable(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_NOT_ACCEPTABLE.String(), fmt.Sprintf(format, args...))
}

func IsInvalidRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_REQUEST.String() && e.Code == 411
}

func ErrorInvalidRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(411, ErrorReason_INVALID_REQUEST.String(), fmt.Sprintf(format, args...))
}

func IsLimited(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LIMITED.String() && e.Code == 429
}

func ErrorLimited(format string, args ...interface{}) *errors.Error {
	return errors.New(429, ErrorReason_LIMITED.String(), fmt.Sprintf(format, args...))
}

func IsSystemError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SYSTEM_ERROR.String() && e.Code == 500
}

func ErrorSystemError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SYSTEM_ERROR.String(), fmt.Sprintf(format, args...))
}
